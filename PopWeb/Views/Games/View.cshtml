@model Pop.Domain.Entities.Game

@{
    ViewBag.Title = "Pop-culture &amp; Divertissement";
    ViewBag.ActiveMenu = "#games-menu";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2><span class="fa fa-gamepad fa-lg" style="margin-right: 0.8em;"></span>Jeux</h2>
<hr />
<div class="row">
    <div class="col-md-8">
        <div class="col-md-12" style="margin: 1.6em 0 2em 0;">
            @if (Request.IsAuthenticated) {
            <form role="form" action="@Url.Action("Edit", "Games", new { id = Model.Id })" method="get" style="display: inline; margin-right: 1.2em;">
                <button type="submit" class="btn-sm btn-default"><span class="fa fa-edit fa-lg"></span></button>
            </form>
            }
            <h3 style="display: inline; vertical-align: bottom;"><strong>@Model.Title</strong></h3>
        </div>
        <div class="col-md-12" style="font-size: 1.2em;">
            @if (!string.IsNullOrEmpty(Model.Genre)) { <strong>@Model.Genre</strong><span>, </span> }
            d&eacute;velopp&eacute; par <strong>@Model.Developper</strong> et sorti en <strong>@Model.ReleaseDate</strong>
        </div>
        @if (!string.IsNullOrEmpty(Model.GamingPlatform)) {
            <div class="col-md-12" style="font-size: 1.2em; margin-top: 0.2em;">disponible sur <strong>@Model.GamingPlatform</strong></div>
        }
        <div class="col-md-12" style="margin-top: 1.4em;"><h4><small style="font-size: 1em;">R&eacute;sum&eacute;</small></h4></div>
        <div class="col-md-12"><p>@Model.Summary</p></div>
        @if (!string.IsNullOrEmpty(Model.WikipediaLink)) {
            <div class="col-md-12" style="margin-top: 1em;"><a href="@Model.WikipediaLink"><i class="fa fa-external-link" style="margin-right: 0.4em;"></i>Wikipedia</a></div>
        }
        <hr />
        @{
            if (Model.GamingSessions.Count > 0) {
                var session = Model.GamingSessions[0];
                var text = string.IsNullOrEmpty(session.Note) ? "commencé " : session.Note;
                @: <div class="col-md-12" style="font-size: 1.2em;">@text le @session.Date.ToString("dddd dd MMMM yyyy", System.Globalization.CultureInfo.GetCultureInfo("fr-Fr"))</div>

                for (int i = 1; i < Model.GamingSessions.Count - 1; i++) {
                    session = Model.GamingSessions[i];
                    if (!string.IsNullOrEmpty(session.Note)) {
                        @: <div class="col-md-12" style="font-size: 1.2em;">@session.Note le @session.Date.ToString("dddd dd MMMM yyyy", System.Globalization.CultureInfo.GetCultureInfo("fr-Fr"))</div>
                    }
                }

                if (Model.GamingSessions.Count > 1) {
                    session = Model.GamingSessions[Model.GamingSessions.Count - 1];
                    text = string.IsNullOrEmpty(session.Note) ? "dernière session " : session.Note;
                    @: <div class="col-md-12" style="font-size: 1.2em;">@text le @session.Date.ToString("dddd dd MMMM yyyy", System.Globalization.CultureInfo.GetCultureInfo("fr-Fr"))</div>
                }
            }
        }
        @if (Model.GamingSessionForCharts != "[]") {
            <div class="col-md-12" style="margin-top: 2em;"><h4><small style="font-size: 1em;">R&eacute;partition des sessions</small></h4></div>
            <div id="chartcontainer" class="col-md-12" style="height: 20em;"></div>
        }
    </div>
    <div class="col-md-4 text-right" style="margin-left: -0.8em;">
        @{ var imageUrl = string.IsNullOrEmpty(Model.CoverFileName)
                    ? "/Content/images/no_cover.jpg"
                    : "/Content/images/games/" + Model.CoverFileName; }
        <a class="fancybox" rel="group" href="@imageUrl">
            <img src="@imageUrl" alt="@Model.Title (couverture)" style="width: 100%;" />
        </a>
    </div>
</div>

@section scripts {
    <script>
        $(document).ready(function () {
            var chartSessions = @Model.GamingSessionForCharts;
            if (chartSessions == '' || chartSessions == undefined) {
                return;
            }

            var xTicks = @Model.GamingSessionXAxisTicks;
            var yTicks = @Model.GamingSessionYAxisTicks;
            var chartInterval = "@Model.ChartIntervalType";
            var plot1 = $.jqplot('chartcontainer', chartSessions, {
                animate: true,
                axesDefaults: {
                    labelRenderer: $.jqplot.CanvasAxisLabelRenderer
                },
                axes: {
                    xaxis: {
                        showLabel: false,
                        ticks: xTicks,
                        tickOptions: {
                            formatter: function (format, val) {
                                var startDate = new Date(@Model.FirstChartDate.Year, @Model.FirstChartDate.Month - 1, @Model.FirstChartDate.Day);
                                var tickDate = new Date(startDate);
                                if (chartInterval == "Daily") {
                                    tickDate.setDate(tickDate.getDate() + val);
                                } else if (chartInterval == "Weekly") {
                                    tickDate.setDate(tickDate.getDate() + (val*7));
                                } else if (chartInterval == "Monthly") {
                                    tickDate.setMonth(tickDate.getMonth() + val);
                                }

                                var dd = tickDate.getDate();
                                var mm = tickDate.getMonth() + 1;
                                var yyyy = tickDate.getFullYear();
                                if (dd < 10) {
                                    dd = '0' + dd
                                }

                                if (mm < 10) {
                                    mm = '0' + mm
                                }

                                if (chartInterval == "Monthly") {
                                    return mm + "/" + yyyy;
                                } else {
                                    if (val == 0) {
                                        return dd + "/" + mm + "/" + yyyy;
                                    } else {
                                        return dd  + "/" + mm;
                                    }
                                }
                            }
                        },
                    },
                    yaxis: {
                        showLabel: false,
                        ticks: yTicks,
                        tickOptions: {
                            formatter: function (format, val) {
                                if (val % 1 != 0) {
                                    return '';
                                } else {
                                    return String(val);
                                }
                            }
                        }
                    }
                },
                series: [{ color: '#5FAB78' }],
            });
        });
    </script>
}